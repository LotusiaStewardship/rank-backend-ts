// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Human identity
model Account {
  id       String    @id
  profiles Profile[]

  @@index([id(type: hash)])
}

// Online profiles related to human identity
model Profile {
  // 16-byte hexadecimal representation of profile handle
  id            String
  accountId     String
  // e.g. Twitter/X.com
  platform      String
  // overall ranking, in satoshis
  ranking       BigInt?
  // Total number of RANK txs with positive sentinment
  ranksPositive Int?
  // Total number of RANK txs with negative sentiment
  ranksNegative Int?
  ranks         RankTransaction[]
  account       Account?          @relation(fields: [accountId], references: [id])

  @@id([id, platform])
  @@index([id(type: hash)])
  // these indexes are best used with a `LIMIT BY`
  // ref: https://www.postgresql.org/docs/current/indexes-ordering.html#INDEXES-ORDERING
  @@index([id(type: hash), ranking(type: btree, sort: Desc)], name: "profile_idx_ranked_highest")
  @@index([id(type: hash), ranking(type: btree, sort: Asc)], name: "profile_idx_ranked_lowest")
}

model RankTransaction {
  txid      String   @id
  height    Int? // null for mempool transactions
  timestamp BigInt // Block timestamp or indexer first-seen time
  value     BigInt // in satoshis
  sentiment Boolean // 
  profileId String // 
  platform  String 
  profile   Profile @relation(fields: [profileId, platform], references: [id, platform])
  // RankTransactions will be deleted if their connected Block is deleted
  block Block? @relation(fields: [height], references: [height], onDelete: Cascade)
  
  @@index([profileId(type: hash), sentiment(type: hash)])
  @@index([profileId(type: hash)])
  @@index([height(sort: Desc)])
}

model Block {
  hash        String @unique
  height      Int    @unique
  timestamp   BigInt
  ranksLength Int   @default(0)
  ranks RankTransaction[]

  @@index([hash(type: hash)])
  @@index([height(sort: Desc)])
  @@index([height, ranksLength(sort: Desc)])
}
