// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Human identity
model Account {
  id       String    @id
  profiles Profile[]

  @@index([id(type: hash)])
}

// Online profiles related to human identity
model Profile {
  id            String // 16-byte hexadecimal representation of profile handle
  accountId     String
  platform      String // e.g. Twitter/X.com
  ranking       BigInt // overall ranking, in satoshis
  votesPositive Int // Total number of RANK txs with positive sentinment
  votesNegative Int // Total number of RANK txs with negative sentiment
  ranks         RankTransaction[]
  account       Account?          @relation(fields: [accountId], references: [id])

  @@id([id, platform])
  @@index([id(type: hash)])
  // these indexes are best used with a `LIMIT BY`
  // ref: https://www.postgresql.org/docs/current/indexes-ordering.html#INDEXES-ORDERING
  @@index([id(type: hash), ranking(type: btree, sort: Desc)], name: "profile_idx_ranked_highest")
  @@index([id(type: hash), ranking(type: btree, sort: Asc)], name: "profile_idx_ranked_lowest")
}

model RankTransaction {
  // RankTransaction data
  txid      String  @id // 32-byte hex
  height    Int? // null for mempool transactions
  timestamp BigInt // Block timestamp or indexer first-seen time
  // RankOutput data
  platform  String // references platform field on Profile model
  profileId String // references id field on Profile model
  sentiment String // 1-byte sentiment, 0x00 = negative, 0x01 = positive, and potentially more
  sats     BigInt // amount of sats burned
  // each RANK tx is associated with a Profile, else it is invalid
  profile   Profile @relation(fields: [profileId, platform], references: [id, platform])
  block     Block?  @relation(fields: [height], references: [height], onDelete: Cascade)

  @@index([profileId(type: hash), sentiment(type: hash)])
  @@index([profileId(type: hash)])
  @@index([height(sort: Desc)])
}

model Block {
  hash        String            @unique
  height      Int               @unique
  timestamp   BigInt
  ranksLength Int               @default(0)
  ranks       RankTransaction[]

  @@index([hash(type: hash)])
  @@index([height(sort: Desc)])
  @@index([height, ranksLength(sort: Desc)])
}
