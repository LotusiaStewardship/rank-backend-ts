// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "./prisma/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Human identity
model Account {
  id       String    @id
  profiles Profile[]

  @@index([id(type: hash)])
}

// Online profiles related to human identity
model Profile {
  id            String // Platform-unique ID (e.g. per API)
  accountId     String
  platform      String // e.g. Twitter/X.com
  ranking       BigInt // overall ranking, in satoshis
  votesPositive Int // Total number of RANK txs with positive sentinment
  votesNegative Int // Total number of RANK txs with negative sentiment
  ranks         RankTransaction[]
  posts         Post[]
  account       Account?          @relation(fields: [accountId], references: [id])

  @@id([platform, id])
  @@index([id(type: hash)])
  // these indexes are best used with a `LIMIT BY`
  // ref: https://www.postgresql.org/docs/current/indexes-ordering.html#INDEXES-ORDERING
  @@index([platform(type: hash), ranking(type: btree, sort: Desc)], name: "profile_idx_ranked_highest")
  @@index([platform(type: hash), ranking(type: btree, sort: Asc)], name: "profile_idx_ranked_lowest")
}

model Post {
  id            String // Platform-unique post ID
  platform      String // e.g. Twitter/x.com
  profileId     String // Platform profile ID (i.e. username)
  ranking       BigInt // Overall post ranking, in satoshis
  votesPositive Int // Total number of RANK txs with positive sentiment
  votesNegative Int // Total number of RANK txs with negative sentiment
  // Each Post correlates with a Profile
  profile       Profile           @relation(fields: [profileId, platform], references: [id, platform])
  // RANK txs specific to this Post
  ranks         RankTransaction[]

  // Each post will require these three entries
  @@id([platform, profileId, id])
  @@index([id(type: hash)])
  // these indexes are best used with a `LIMIT BY`
  // ref: https://www.postgresql.org/docs/current/indexes-ordering.html#INDEXES-ORDERING
  @@index([platform(type: hash), ranking(type: btree, sort: Desc)], name: "post_idx_ranked_highest")
  @@index([platform(type: hash), ranking(type: btree, sort: Asc)], name: "post_idx_ranked_lowest")
}

model RankTransaction {
  // RankTransaction data
  txid          String             @id // 32-byte hex
  scriptPayload String // the p2pkh script payload that spent a UTXO for this transaction
  instanceId    String? // the ID of the extension instance that casted the vote
  height        Int? // null for mempool transactions
  timestamp     BigInt // Block timestamp or indexer first-seen time
  // RankOutput data
  platform      String // references platform field on Profile model
  profileId     String // references id field on Profile model
  postId        String? // optional reference to platform post ID (e.g. x.com/:profileId/status/:postId)
  sentiment     String // 1-byte sentiment, 0x00 = negative, 0x01 = positive, and potentially more
  sats          BigInt // amount of sats burned
  // each RANK tx is associated with a Profile, else it is invalid
  profile       Profile            @relation(fields: [platform, profileId], references: [platform, id])
  // each RANK tx MAY be associated with a Post
  post          Post?              @relation(fields: [platform, profileId, postId], references: [platform, profileId, id])
  // each RANK tx from the mempool does not yet have a Block
  block         Block?             @relation(fields: [height, timestamp], references: [height, timestamp], onDelete: Cascade)
  instance      ExtensionInstance? @relation(fields: [instanceId, scriptPayload], references: [id, scriptPayload])

  // Poll RANK txs for raw SQL queries
  @@index([platform(type: hash), profileId(type: hash), sentiment(type: hash)])
  @@index([platform(type: hash), profileId(type: hash), postId(type: hash), sentiment(type: hash)])
  // Poll RANK txs by height (primarily for block rewinds)
  @@index([height(sort: Desc)])
}

model Block {
  hash        String            @unique
  height      Int               @unique
  timestamp   BigInt
  ranksLength Int               @default(0)
  ranks       RankTransaction[]

  @@unique([height, timestamp])
  @@index([hash(type: hash)])
  @@index([height(sort: Desc)])
  @@index([height, ranksLength(sort: Desc)])
}

model ExtensionInstance {
  id            String            @unique
  scriptPayload String            @unique
  createdAt     DateTime
  lastSeen      DateTime
  optin         Boolean           @default(false)
  votesPositive Int               @default(0)
  votesNegative Int               @default(0)
  ranks         RankTransaction[]

  @@id([id, scriptPayload])
  @@index([scriptPayload(type: hash)])
  @@index([id(type: hash), scriptPayload(type: hash), optin(type: hash)])
}
