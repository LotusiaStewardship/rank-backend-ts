// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class BlockMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):BlockMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBlockMetadata(bb:flatbuffers.ByteBuffer, obj?:BlockMetadata):BlockMetadata {
  return (obj || new BlockMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBlockMetadata(bb:flatbuffers.ByteBuffer, obj?:BlockMetadata):BlockMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BlockMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fieldId():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

fieldValue(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

fieldValueLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fieldValueArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startBlockMetadata(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFieldId(builder:flatbuffers.Builder, fieldId:number) {
  builder.addFieldInt32(0, fieldId, 0);
}

static addFieldValue(builder:flatbuffers.Builder, fieldValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, fieldValueOffset, 0);
}

static createFieldValueVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startFieldValueVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static endBlockMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBlockMetadata(builder:flatbuffers.Builder, fieldId:number, fieldValueOffset:flatbuffers.Offset):flatbuffers.Offset {
  BlockMetadata.startBlockMetadata(builder);
  BlockMetadata.addFieldId(builder, fieldId);
  BlockMetadata.addFieldValue(builder, fieldValueOffset);
  return BlockMetadata.endBlockMetadata(builder);
}
}
