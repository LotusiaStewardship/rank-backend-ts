// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BlockHash } from '../nng-interface/block-hash.js';


export class UpdatedBlockTip {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UpdatedBlockTip {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUpdatedBlockTip(bb:flatbuffers.ByteBuffer, obj?:UpdatedBlockTip):UpdatedBlockTip {
  return (obj || new UpdatedBlockTip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUpdatedBlockTip(bb:flatbuffers.ByteBuffer, obj?:UpdatedBlockTip):UpdatedBlockTip {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UpdatedBlockTip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

blockHash(obj?:BlockHash):BlockHash|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BlockHash()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startUpdatedBlockTip(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addBlockHash(builder:flatbuffers.Builder, blockHashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, blockHashOffset, 0);
}

static endUpdatedBlockTip(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUpdatedBlockTip(builder:flatbuffers.Builder, blockHashOffset:flatbuffers.Offset):flatbuffers.Offset {
  UpdatedBlockTip.startUpdatedBlockTip(builder);
  UpdatedBlockTip.addBlockHash(builder, blockHashOffset);
  return UpdatedBlockTip.endUpdatedBlockTip(builder);
}
}
