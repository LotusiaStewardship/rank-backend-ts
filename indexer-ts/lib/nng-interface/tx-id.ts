// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Hash } from '../nng-interface/hash.js';


export class TxId {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TxId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTxId(bb:flatbuffers.ByteBuffer, obj?:TxId):TxId {
  return (obj || new TxId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTxId(bb:flatbuffers.ByteBuffer, obj?:TxId):TxId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TxId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hash(obj?:Hash):Hash|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Hash()).__init(this.bb_pos + offset, this.bb!) : null;
}

static startTxId(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, hashOffset, 0);
}

static endTxId(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTxId(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset):flatbuffers.Offset {
  TxId.startTxId(builder);
  TxId.addHash(builder, hashOffset);
  return TxId.endTxId(builder);
}
}
