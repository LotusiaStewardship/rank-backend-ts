// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Coin } from '../nng-interface/coin.js';
import { TxId } from '../nng-interface/tx-id.js';


export class Tx {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Tx {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTx(bb:flatbuffers.ByteBuffer, obj?:Tx):Tx {
  return (obj || new Tx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTx(bb:flatbuffers.ByteBuffer, obj?:Tx):Tx {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

txid(obj?:TxId):TxId|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TxId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

raw(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

rawLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rawArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

spentCoins(index: number, obj?:Coin):Coin|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Coin()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

spentCoinsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTx(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTxid(builder:flatbuffers.Builder, txidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, txidOffset, 0);
}

static addRaw(builder:flatbuffers.Builder, rawOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rawOffset, 0);
}

static createRawVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startRawVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSpentCoins(builder:flatbuffers.Builder, spentCoinsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, spentCoinsOffset, 0);
}

static createSpentCoinsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpentCoinsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTx(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTx(builder:flatbuffers.Builder, txidOffset:flatbuffers.Offset, rawOffset:flatbuffers.Offset, spentCoinsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Tx.startTx(builder);
  Tx.addTxid(builder, txidOffset);
  Tx.addRaw(builder, rawOffset);
  Tx.addSpentCoins(builder, spentCoinsOffset);
  return Tx.endTx(builder);
}
}
