// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BlockHeader } from '../nng-interface/block-header.js';
import { BlockMetadata } from '../nng-interface/block-metadata.js';
import { BlockTx } from '../nng-interface/block-tx.js';


export class Block {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Block {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBlock(bb:flatbuffers.ByteBuffer, obj?:Block):Block {
  return (obj || new Block()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBlock(bb:flatbuffers.ByteBuffer, obj?:Block):Block {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Block()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

header(obj?:BlockHeader):BlockHeader|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new BlockHeader()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

metadata(index: number, obj?:BlockMetadata):BlockMetadata|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new BlockMetadata()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

metadataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

txs(index: number, obj?:BlockTx):BlockTx|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new BlockTx()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

txsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

fileNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

dataPos():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

undoPos():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startBlock(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addHeader(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, headerOffset, 0);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, metadataOffset, 0);
}

static createMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetadataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTxs(builder:flatbuffers.Builder, txsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, txsOffset, 0);
}

static createTxsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTxsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addFileNum(builder:flatbuffers.Builder, fileNum:number) {
  builder.addFieldInt32(3, fileNum, 0);
}

static addDataPos(builder:flatbuffers.Builder, dataPos:number) {
  builder.addFieldInt32(4, dataPos, 0);
}

static addUndoPos(builder:flatbuffers.Builder, undoPos:number) {
  builder.addFieldInt32(5, undoPos, 0);
}

static endBlock(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBlock(builder:flatbuffers.Builder, headerOffset:flatbuffers.Offset, metadataOffset:flatbuffers.Offset, txsOffset:flatbuffers.Offset, fileNum:number, dataPos:number, undoPos:number):flatbuffers.Offset {
  Block.startBlock(builder);
  Block.addHeader(builder, headerOffset);
  Block.addMetadata(builder, metadataOffset);
  Block.addTxs(builder, txsOffset);
  Block.addFileNum(builder, fileNum);
  Block.addDataPos(builder, dataPos);
  Block.addUndoPos(builder, undoPos);
  return Block.endBlock(builder);
}
}
