// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Tx } from '../nng-interface/tx.js';


export class MempoolTx {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MempoolTx {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMempoolTx(bb:flatbuffers.ByteBuffer, obj?:MempoolTx):MempoolTx {
  return (obj || new MempoolTx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMempoolTx(bb:flatbuffers.ByteBuffer, obj?:MempoolTx):MempoolTx {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MempoolTx()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

tx(obj?:Tx):Tx|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Tx()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startMempoolTx(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addTx(builder:flatbuffers.Builder, txOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, txOffset, 0);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(1, time, BigInt('0'));
}

static endMempoolTx(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMempoolTx(builder:flatbuffers.Builder, txOffset:flatbuffers.Offset, time:bigint):flatbuffers.Offset {
  MempoolTx.startMempoolTx(builder);
  MempoolTx.addTx(builder, txOffset);
  MempoolTx.addTime(builder, time);
  return MempoolTx.endMempoolTx(builder);
}
}
