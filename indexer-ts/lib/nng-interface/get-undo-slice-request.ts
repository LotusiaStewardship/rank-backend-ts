// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class GetUndoSliceRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetUndoSliceRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetUndoSliceRequest(bb:flatbuffers.ByteBuffer, obj?:GetUndoSliceRequest):GetUndoSliceRequest {
  return (obj || new GetUndoSliceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetUndoSliceRequest(bb:flatbuffers.ByteBuffer, obj?:GetUndoSliceRequest):GetUndoSliceRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetUndoSliceRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fileNum():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

undoPos():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

numBytes():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

static startGetUndoSliceRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFileNum(builder:flatbuffers.Builder, fileNum:number) {
  builder.addFieldInt32(0, fileNum, 0);
}

static addUndoPos(builder:flatbuffers.Builder, undoPos:number) {
  builder.addFieldInt32(1, undoPos, 0);
}

static addNumBytes(builder:flatbuffers.Builder, numBytes:number) {
  builder.addFieldInt32(2, numBytes, 0);
}

static endGetUndoSliceRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetUndoSliceRequest(builder:flatbuffers.Builder, fileNum:number, undoPos:number, numBytes:number):flatbuffers.Offset {
  GetUndoSliceRequest.startGetUndoSliceRequest(builder);
  GetUndoSliceRequest.addFileNum(builder, fileNum);
  GetUndoSliceRequest.addUndoPos(builder, undoPos);
  GetUndoSliceRequest.addNumBytes(builder, numBytes);
  return GetUndoSliceRequest.endGetUndoSliceRequest(builder);
}
}
