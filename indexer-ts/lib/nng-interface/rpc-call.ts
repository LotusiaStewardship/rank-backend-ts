// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { RpcRequest, unionToRpcRequest, unionListToRpcRequest } from '../nng-interface/rpc-request.js';


export class RpcCall {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RpcCall {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRpcCall(bb:flatbuffers.ByteBuffer, obj?:RpcCall):RpcCall {
  return (obj || new RpcCall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRpcCall(bb:flatbuffers.ByteBuffer, obj?:RpcCall):RpcCall {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RpcCall()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

rpcType():RpcRequest {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : RpcRequest.NONE;
}

rpc<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startRpcCall(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addRpcType(builder:flatbuffers.Builder, rpcType:RpcRequest) {
  builder.addFieldInt8(0, rpcType, RpcRequest.NONE);
}

static addRpc(builder:flatbuffers.Builder, rpcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rpcOffset, 0);
}

static endRpcCall(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRpcCall(builder:flatbuffers.Builder, rpcType:RpcRequest, rpcOffset:flatbuffers.Offset):flatbuffers.Offset {
  RpcCall.startRpcCall(builder);
  RpcCall.addRpcType(builder, rpcType);
  RpcCall.addRpc(builder, rpcOffset);
  return RpcCall.endRpcCall(builder);
}
}
