// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { BlockIdentifier, unionToBlockIdentifier, unionListToBlockIdentifier } from '../nng-interface/block-identifier.js';


export class GetBlockRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GetBlockRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGetBlockRequest(bb:flatbuffers.ByteBuffer, obj?:GetBlockRequest):GetBlockRequest {
  return (obj || new GetBlockRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGetBlockRequest(bb:flatbuffers.ByteBuffer, obj?:GetBlockRequest):GetBlockRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GetBlockRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

blockIdType():BlockIdentifier {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : BlockIdentifier.NONE;
}

blockId<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startGetBlockRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBlockIdType(builder:flatbuffers.Builder, blockIdType:BlockIdentifier) {
  builder.addFieldInt8(0, blockIdType, BlockIdentifier.NONE);
}

static addBlockId(builder:flatbuffers.Builder, blockIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, blockIdOffset, 0);
}

static endGetBlockRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createGetBlockRequest(builder:flatbuffers.Builder, blockIdType:BlockIdentifier, blockIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  GetBlockRequest.startGetBlockRequest(builder);
  GetBlockRequest.addBlockIdType(builder, blockIdType);
  GetBlockRequest.addBlockId(builder, blockIdOffset);
  return GetBlockRequest.endGetBlockRequest(builder);
}
}
