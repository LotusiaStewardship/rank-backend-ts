// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { TxOut } from '../nng-interface/tx-out.js';


export class Coin {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Coin {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCoin(bb:flatbuffers.ByteBuffer, obj?:Coin):Coin {
  return (obj || new Coin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCoin(bb:flatbuffers.ByteBuffer, obj?:Coin):Coin {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Coin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

txOut(obj?:TxOut):TxOut|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TxOut()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

isCoinbase():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startCoin(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addTxOut(builder:flatbuffers.Builder, txOutOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, txOutOffset, 0);
}

static addIsCoinbase(builder:flatbuffers.Builder, isCoinbase:boolean) {
  builder.addFieldInt8(1, +isCoinbase, +false);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt32(2, height, 0);
}

static endCoin(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createCoin(builder:flatbuffers.Builder, txOutOffset:flatbuffers.Offset, isCoinbase:boolean, height:number):flatbuffers.Offset {
  Coin.startCoin(builder);
  Coin.addTxOut(builder, txOutOffset);
  Coin.addIsCoinbase(builder, isCoinbase);
  Coin.addHeight(builder, height);
  return Coin.endCoin(builder);
}
}
